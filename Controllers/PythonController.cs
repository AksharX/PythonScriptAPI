using System.Diagnostics;
using System.IO;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using PythonAPI.Configuration;
using PythonAPI.Models;

namespace PythonAPI.Controllers
{
    [ApiController]
    [Route("[controller]/[action]")]
    public class PythonController : ControllerBase
    {
        private readonly Python _pythonScript;
        private readonly ILogger<PythonController> _logger;

        public PythonController(IOptions<Python> pythonScript, ILogger<PythonController> logger)
        {
            _pythonScript = pythonScript.Value;
            _logger = logger;
        }

        [HttpPost]
        public ScriptResult ExecuteScript([FromBody] ScriptInput args)
        {
            var pathToScirpt = _pythonScript.Script.PathToScript;

            return new ScriptResult
            {
                Result = run_cmd(pathToScirpt, args.Input)
            };
        }

        private string run_cmd(string cmd, string args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "python";
            start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    if(stderr.Length > 0 )
                    {
                        _logger.LogCritical(stderr);
                    }
                    _logger.LogInformation(result);
                    return result;
                }
            }
        }
    }
}
